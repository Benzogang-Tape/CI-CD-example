// Code generated by MockGen. DO NOT EDIT.
// Source: notes.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Benzogang-Tape/CI-CD-example/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockNotesAPI is a mock of NotesAPI interface.
type MockNotesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNotesAPIMockRecorder
}

// MockNotesAPIMockRecorder is the mock recorder for MockNotesAPI.
type MockNotesAPIMockRecorder struct {
	mock *MockNotesAPI
}

// NewMockNotesAPI creates a new mock instance.
func NewMockNotesAPI(ctrl *gomock.Controller) *MockNotesAPI {
	mock := &MockNotesAPI{ctrl: ctrl}
	mock.recorder = &MockNotesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotesAPI) EXPECT() *MockNotesAPIMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNotesAPI) CreateNote(ctx context.Context, text string) (models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, text)
	ret0, _ := ret[0].(models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNotesAPIMockRecorder) CreateNote(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNotesAPI)(nil).CreateNote), ctx, text)
}

// DeleteNote mocks base method.
func (m *MockNotesAPI) DeleteNote(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNotesAPIMockRecorder) DeleteNote(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNotesAPI)(nil).DeleteNote), ctx, id)
}

// GetAllNotes mocks base method.
func (m *MockNotesAPI) GetAllNotes(ctx context.Context, orderBy string) ([]models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotes", ctx, orderBy)
	ret0, _ := ret[0].([]models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotes indicates an expected call of GetAllNotes.
func (mr *MockNotesAPIMockRecorder) GetAllNotes(ctx, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotes", reflect.TypeOf((*MockNotesAPI)(nil).GetAllNotes), ctx, orderBy)
}

// GetNoteByID mocks base method.
func (m *MockNotesAPI) GetNoteByID(ctx context.Context, id uint64) (models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByID", ctx, id)
	ret0, _ := ret[0].(models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByID indicates an expected call of GetNoteByID.
func (mr *MockNotesAPIMockRecorder) GetNoteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByID", reflect.TypeOf((*MockNotesAPI)(nil).GetNoteByID), ctx, id)
}

// UpdateNote mocks base method.
func (m *MockNotesAPI) UpdateNote(ctx context.Context, id uint64, newText string) (models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, id, newText)
	ret0, _ := ret[0].(models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNotesAPIMockRecorder) UpdateNote(ctx, id, newText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNotesAPI)(nil).UpdateNote), ctx, id, newText)
}
